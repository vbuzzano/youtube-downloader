#!/bin/bash

DOWNLOAD_SPEED_LIMIT=20M
DEST_DIR="~/Youtube"
DOWNLOAD_ARCHIVE="$DEST_DIR/downloaded.txt"
BATCH_FILE="$DEST_DIR/channel_list.txt"
COOKIES_FILE="" # set a file to enable cookies
LOG_FILE="$DEST_DIR/downloaded.log"
CACHE_DIR="$DEST_DIR/cache"

DEFAULT_DATEAFTER=$(date +"%Y0101")
DEFAULT_SUBTITLELANG=""
DEFAULT_SUBTITLEFORMAT="srt"
DEFAULT_FORMAT="bestvideo[ext=?mp4][height<=?720]+bestaudio[ext=?mp3]/best"
DEFAULT_MAXFILESIZE="2048m"
DEFAULT_SLEEP_INTERVAL=30
DEFAULT_MAXSLEEP_INTERVAL=60

TMP_DIR="/tmp/youtube-downloader"
CURRENT_DIR=`pwd`


_usage()
{
  echo "Usage: $0 config_file"
  exit 2
}

_printerr() {
  if [ ! -z "$LOG_FILE" ]; then
    echo "ERROR: $@"  >> $LOG_FILE
  fi
  echo "$@" 1>&2
}

_print() {
  if [ ! -z "$sub_lang" ]; then
    echo "$@" >> $LOG_FILE
  fi
  echo "$@"
}

_load_config() {
  exec 3<$CONFIG_FILE 
  while read -u3 line; do
    eval "$line"
  done
  exec 3<&-
}

_append_past_videos_to_downloaded_archive() {
  # $1 = channel url
  # $2 = dateafter
  # $3 = cache download archive filename
  local url=$1
  local date_after=$2
  local file_cache=$3

  local youtube_dl_cmd=""
  read -d '' youtube_dl_cmd << EOF
  youtube-dl --playlist-reverse
    --ignore-errors
    --simulate
    --sleep-interval $DEFAULT_SLEEP_INTERVAL
    --max-sleep-interval $DEFAULT_MAXSLEEP_INTERVAL
    --datebefore "$date_after"
    --youtube-skip-dash-manifest
    --no-cache-dir
    --get-id
EOF

  if [ ! -z "$COOKIES_FILE" ]; then
    youtube_dl_cmd="$youtube_dl_cmd --cookies \"$COOKIES_FILE\""
  fi
  youtube_dl_cmd="$youtube_dl_cmd $url"

  # execute youtube-dl
  rm -f $file_cache
  eval $youtube_dl_cmd 2>&1 | tee -a $file_cache $LOG_FILE

  # remove error line and add youtube before viedo id
  sed -i -E "s/([a-zA-Z0-9_-]{11})?(.*)?/youtube \1/" $file_cache && \
  sed -i "/^youtube $/d" $file_cache && \
  sed -i -E "s/(.*)/youtube \1/" $file_cache && \
  cat $file_cache >> $DOWNLOAD_ARCHIVE && sed -i '/^$/d' $DOWNLOAD_ARCHIVE
}

_download_videos() {
  # $1 = channel url
  # $2 = channel unique key
  # $3 = date_after
  # $4 = format
  # $5 = max file size
  # $6 = subtitle lang
  # $7 = subtitle format
  local url=$1
  local key=$2
  local date_after=$3
  local format=$4
  local max_filesize=$5
  local sub_lang=$6
  local sub_format=$7

  rm -rf $TMP_DIR/$key
  mkdir -p $TMP_DIR/$key/downloads
  cd  $TMP_DIR/$key
  cp $DOWNLOAD_ARCHIVE ./downloaded.txt
  cd downloads

  local youtube_dl_cmd=""
  read -d '' youtube_dl_cmd << EOF
  youtube-dl --playlist-reverse
    --download-archive ../downloaded.txt
    --ignore-errors
    --max-filesize "$max_filesize"
    --limit-rate "$DOWNLOAD_SPEED_LIMIT"
    --sleep-interval $DEFAULT_SLEEP_INTERVAL
    --max-sleep-interval $DEFAULT_MAXSLEEP_INTERVAL
    --format "$format"
    --dateafter "$date_after"
    --youtube-skip-dash-manifest
    --autonumber-start 0001
    --no-cache-dir
    --add-metadata
    --write-thumbnail
    --write-description
EOF

  if [ ! -z "$COOKIES_FILE" ]; then
    youtube_dl_cmd="$youtube_dl_cmd --cookies \"$COOKIES_FILE\""
  fi

  if [ ! -z "$sub_lang" ]; then
    youtube_dl_cmd="$youtube_dl_cmd --write-sub --write-auto-sub --sub-lang \"$sub_lang\" --sub-format \"$sub_format\" --convert-subs \"$sub_format\""
  fi

  read -d '' youtube_dl_cmd << EOF
  $youtube_dl_cmd
    -o "%(uploader)s/%(uploader)s - S$(date +"%Y")/%(playlist_index)s. %(title)s %(upload_date)s/%(uploader)s - S$(date +"%Y")E%(playlist_index)s - %(upload_date)s - %(title)s --end.%(ext)s" \
    $url
EOF

  # execute youtube-dl
  eval $youtube_dl_cmd 2>&1 | tee -a $LOG_FILE

  local count=$(find . -mindepth 1 -maxdepth 1 -type d | wc -l)
  if [ $count -gt 0 ]; then
    rename 's/(.*) - (\d{4})(\d{2})(\d{2}) - (.*) --end\.(.*)/$1 - $2-$3-$4 - $5.$6/' **/**/**/*.* && \
    _print "Copy downloaded videos to $DEST_DIR" && \
    cp -rfn * $DEST_DIR && \
    cd .. && \
    _print "Append downloaded archive to $DOWNLOAD_ARCHIVE and remove empty lines" && \
    grep -Fxvf $DOWNLOAD_ARCHIVE ./downloaded.txt >> $DOWNLOAD_ARCHIVE && sed -i '/^$/d' $DOWNLOAD_ARCHIVE
  fi
  cd $CURRENT_DIR && \
  rm -rf $TMP_DIR/$key
}

_execute() {
  # Loop batch file
  awk '!/^(#|;|\])/'  $BATCH_FILE |
  while IFS= read -r channel; do

    # continue on empty line
    if [ -z "$channel" ]; then continue; fi

    _print ""
    _print "Prepare to download videos for $channel ..."

    # read channel infos
    IFS='|' read -ra channel_args <<< "$channel"
    local c_url=${channel_args[0]}
    local c_dateafter=${channel_args[1]}
    local c_format=${channel_args[2]}
    local c_maxfilesize=${channel_args[3]}
    local c_subtitlelang=${channel_args[4]}
    local c_subtitleformat=${channel_args[5]}

    # check that c_url is not empty
    if [ -z "$c_url" ]; then
      echo "ERROR: channel url is required for channel $channel"
      exit 1
    fi

    # check channel infos value and set default values if needed
    if [ "$c_dateafter" == "default" ] || [ "$c_dateafter" == "" ]; then c_dateafter=$DEFAULT_DATEAFTER; fi
    if [ "$c_format" == "default" ] || [ "$c_format" == "" ]; then c_format=$DEFAULT_FORMAT; fi
    if [ "$c_maxfilesize" == "default" ] || [ "$c_maxfilesize" == "" ]; then c_maxfilesize=$DEFAULT_MAXFILESIZE; fi
    if [ "$c_subtitlelang" == "default" ] || [ "$c_subtitlelang" == "" ]; then c_subtitlelang=$DEFAULT_SUBTITLELANG; fi
    if [ "$c_subtitleformat" == "default" ] || [ "$c_subtitleformat" == "" ]; then c_subtitleformat=$DEFAULT_SUBTITLEFORMAT; fi

    # create unique channel key
    local c_key=$(echo -n "$c_url" | md5sum | cut -d' ' -f1)

    # check if we need to add old videos to downloaded archive
    local past_downloaded_filename="$CACHE_DIR/$c_key.txt"
    if [ ! -f "$past_downloaded_filename" ]; then
        _print
        _print "Add past videos id to download archive for $c_url to file $past_downloaded_filename ..."
        _append_past_videos_to_downloaded_archive "$c_url" "$c_dateafter" "$past_downloaded_filename"
    fi

    _print
    _print "Download new videos files for $c_url"

    _download_videos "$c_url" "$c_key" "$c_dateafter" "$c_format" "$c_maxfilesize" "$c_subtitlelang" "$c_subtitleformat"

    _print
    _print "done."
  done
}

# check config file
CONFIG_FILE="$1"
if [ -z "$CONFIG_FILE" ]; then _usage; fi
if [ ! -f "$CONFIG_FILE" ]; then
  echo "config file $CONFIG_FILE not found!"
  exit 1
fi

# load config
_load_config

# create log
touch $LOG_FILE

# assure download archive exists
touch $DOWNLOAD_ARCHIVE

# init cache dir
mkdir -p $CACHE_DIR


_execute
